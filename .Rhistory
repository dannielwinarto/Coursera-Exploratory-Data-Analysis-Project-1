level(states_map$region)
levels(states_map$region)
table(states_map$region)
levels(as.factor(states_map$region))
states_map %>% filter(subregion == "texas")
states_map %>% filter(subregion ==  "missouri")
a = states_map %>% filter(subregion ==  "missouri")
glimpse(states_map)
a = states_map %>% filter(region ==  "missouri")
a
library(dplyr)
states_map = map_data("state")
states_map = map_data("country")
states_map = map_data("state")
?map_data
glimpse(states_map)
ggplot(states_map, aes(x = long, y = lat)) + geom_point()
ggplot(states_map, aes(x = long, y = lat)) +
geom_point()
geom_polygon()
ggplot(states_map, aes(x = long, y = lat)) +
geom_polygon()
ggplot(states_map, aes(x = long, y = lat, group = group)) +
geom_polygon()
geom_polygon( fill = "green")
ggplot(states_map, aes(x = long, y = lat, group = group)) +
geom_polygon( fill = "green")
ggplot(states_map, aes(x = long, y = lat, group = group)) +
geom_polygon( fill = "white", color = "black")
ggplot(states_map, aes(x = long, y = lat)) +
geom_line()
ggplot(states_map, aes(x = long, y = lat)) +
geom_point()
ggplot(states_map, aes(x = long, y = lat)) +
geom_point()
ggplot(states_map, aes(x = long, y = lat, group = group)) +
geom_polygon( fill = "white", color = "black")
world_map = map_data("world")
ggplot(world_map, aes(x = long, y = lat)) +
geom_point()
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon( fill = "white", color = "black")
lebanon = map_data("world")
lebanon = map_data("world", region  = "Lebanon")
lebanon
ggplot(lebanon, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
lebanon = map_data("world", region  = "Indonesia")
lebanon
ggplot(lebanon, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
lebanon = map_data("world", region  = "Lebanon")
ggplot(lebanon, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
far_east = map_data("world", region  = c("Japan", "China", "North Korea", "South Korea")
ggplot(far_east, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
far_east = map_data("world", region  = c("Japan", "China", "North Korea", "South Korea")
far_east = map_data("world", region  = c("Japan", "China", "North Korea", "South Korea"))
far_east = map_data("world", region  =
c("Japan", "China"))
far_east = map_data("world", region  =
c("Japan", "China", "North Korea"))
ggplot(far_east, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
far_east = map_data("world", region  =
c("Japan", "China", "North Korea", "South Korea"))
far_east = map_data("world", region  =
c("Japan", "China", "North Korea", "South Korea"))
ggplot(far_east, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
countries = world_map$region
countries
world_map = map_data("world")
countries = world_map %>% distinct(region)
countries
countries = world_map %>% distinct(region) %>% arrange(region)
countries
countries
USAccDeaths
?USAccDeaths
head(USArrests)
head(?USArrests)
?USArrests
head(USArrests)
summary(USArrests)
ncol(USArrests)
head(USArrests)
ncol(USArrests)
ncol(USArrests)[1]
ncol(USArrests)[2]
colnames(USArrests)[2]
colnames(USArrests)[1]
colnames(USArrests)[5]
colnames(USArrests)[5]  =
colnames(USArrests)[5]
colnames(USArrests)[5]
colnames(USArrests)[5]  = "State"
rownames(USArrests)
USArrests%State = rownames(USArrests)
USArrests$State = rownames(USArrests)
head(USArrests)
head(USArrests)
crimes = USArrests
crime$State = rownames(USArrests)
crimes$State = rownames(USArrests)
crimes
ggplot(crimes, aes(x = states,)) + geom_polygon()
ggplot(crimes, aes(x = states)) + geom_polygon()
# Create maps for the usa and the world
library(maps)
library(ggplot2)
# the maps package has information about countries state, counties etc
states_map = map_data("state")
library(dplyr)
glimpse(states_map)
# levels(as.factor(states_map$region))
# a = states_map %>% filter(region ==  "missouri")
states_map = map_data("state")
ggplot(states_map, aes(x = long, y = lat)) +
geom_point()
ggplot(states_map, aes(x = long, y = lat, group = group)) +
geom_polygon( fill = "white", color = "black")
# map of the world
world_map = map_data("world")
ggplot(world_map, aes(x = long, y = lat)) +
geom_point()
ggplot(world_map, aes(x = long, y = lat, group = group)) +
geom_polygon( fill = "white", color = "black")
# the map_data function can take the following
# world, nz, france, italy, usa, state, county
# get the map for lebanon
lebanon = map_data("world", region  = "Lebanon")
ggplot(lebanon, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
# get the map for far east
far_east = map_data("world", region  =
c("Japan", "China", "North Korea", "South Korea"))
ggplot(far_east, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
# get all country names
world_map = map_data("world")
countries = world_map %>% distinct(region) %>% arrange(region)
states_map = map_data("state")
View(states_map)
View(states_map)
View(crimes)
View(crimes)
crimes_map = merge(states_map, crime, by.x = region, by.y = states)
crimes_map = merge(states_map, crimes, by.x = region, by.y = states)
crimes_map = merge(states_map, #first dataframe
crimes, #2nd dataframe
by.x = "region", #key for first dataframe
by.y = "states") #key for 2nd dataframe
crimes_map = merge(states_map, #first dataframe
crimes, #2nd dataframe
by.x = "region", #key for first dataframe
by.y = "states") #key for 2nd dataframe
crimes_map = merge(states_map, #first dataframe
crimes, #2nd dataframe
by.x = "region", #key for first dataframe
by.y = "States") #key for 2nd dataframe
crimes
head(USArrests)
crimes = USArrests
crimes
crimes$State = rownames(USArrests)
crimes$State
crimes
tolower(crimes$State)
crimes$State = tolower(crimes$State)
crimes
crimes_map = merge(states_map, #first dataframe
crimes, #2nd dataframe
by.x = "region", #key for first dataframe
by.y = "States") #key for 2nd dataframe
crimes_map = merge(states_map, #first dataframe
crimes, #2nd dataframe
by.x = "region", #key for first dataframe
by.y = "State") #key for 2nd dataframe
glimpse(crimes_map)
crimes
glimpse(crimes_map)
ggplot(crimes_map, aes(x = long, y = lat, group = group)) +
geom_polygon()
ggplot(crimes_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black"))
ggplot(crimes_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
ggplot(states_map, aes(x = long, y = lat, group = group)) +
geom_polygon( fill = "white", color = "black")
ggplot(states_map, aes(x = long, y = lat, group = group)) +
geom_polygon( fill = "white", color = "black")
ggplot(crimes_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
ggplot(states_map, aes(x = long, y = lat, group = group)) +
geom_polygon( fill = "white", color = "black")
ggplot(crimes_map, aes(x = long, y = lat, group = group)) +
geom_polygon( fill = "white", color = "black")
ggplot(crimes_map, aes(x = long, y = lat)) +
geom_polygon(fill = "white", color = "black")
ggplot(crimes_map, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black")
glimpse(crimes_map)
ggplot(crimes_map, aes(x = long, y = lat, group = group, fill = Murder)) +
geom_polygon(fill = "white", color = "black")
ggplot(crimes_map, aes(x = long, y = lat, group = group, color = Murder)) +
geom_polygon(fill = "white", color = "black")
ggplot(crimes_map, aes(x = long, y = lat, group = group, color = group)) +
geom_polygon(fill = "white", color = "black")
ggplot(crimes_map, aes(x = long, y = lat, group = group, fill = murder)) +
geom_polygon(fill = "white", color = "black")
ggplot(crimes_map, aes(x = long, y = lat, group = group, fill = Murder)) +
geom_polygon(fill = "white", color = "black")
ggplot(crimes_map, aes(x = long, y = lat, group = group, fill = Murder)) +
geom_polygon( color = "black")
ggplot(crimes_map, aes(x = long, y = lat, group = group)) +
geom_polygon( color = "black")
ggplot(crimes_map, aes(x = long, y = lat, group = group, fill = Murder)) +
geom_polygon( color = "black")
ggplot(crimes_map, aes(x = long, y = lat, group = group, fill = Murder)) +
geom_polygon( color = "black") + scale_fill_gradient(low = "white", high = "blue")
ggplot(crimes_map, aes(x = long, y = lat, group = group, fill = Murder)) +
geom_polygon( color = "black") + scale_fill_gradient(low = "white", high = "red")
ggplot(crimes_map, aes(x = long, y = lat, group = group, fill = Murder)) +
geom_polygon( color = "black") + scale_fill_gradient(low = "white", high = "red")
ggplot(crimes_map, aes(x = long, y = lat, group = group, fill = Murder)) +
geom_polygon( color = "black") + scale_fill_gradient(low = "white", high = "red")
coord_map("polyconic")
ggplot(crimes_map, aes(x = long, y = lat, group = group, fill = Murder)) +
geom_polygon( color = "black") + scale_fill_gradient(low = "white", high = "red") +
coord_map("polyconic")
ggplot(crimes_map, aes(x = long, y = lat, group = group, fill = Murder)) +
geom_polygon( color = "black") + scale_fill_gradient(low = "white", high = "red")
ggplot(crimes_map, aes(x = long, y = lat, group = group, fill = Murder)) +
geom_polygon( color = "black") + scale_fill_gradient(low = "white", high = "red") +
coord_map("polyconic")
ggplot(crimes_map, aes(x = long, y = lat, group = group, fill = Murder)) +
geom_polygon( color = "black") + scale_fill_gradient(low = "white", high = "red") +
coord_map("polyconic") +
theme_void()
library(ggmap)
library(maps)
library(ggplot2)
library(dplyr)
USC = "University of Southern California Los Angeles"
USC_map = get_map(location = USC)
USC_map
ggmap(USC_map)
library(DBI)
library(RPostgreSQL)
library(dplyr)
install.packages("instaR")
library(instaR)
require(httr)
require(rjson)
library(instaR)
library(instaR)
require(httr)
require(rjson)
library(instaR)
library(RCurl)
library(instaR)
library(RCurl)
client_id = "3950715905f14cc29ca1e1cc241eee7d"
client_secret = "3160ec2d2bc2455f8b8b7792fddaf86c"
client_id = "3950715905f14cc29ca1e1cc241eee7d"
client_secret = "3160ec2d2bc2455f8b8b7792fddaf86c"
library(instaR)
library(RCurl)
library(instaR)
library(RCurl)
client_id = "3950715905f14cc29ca1e1cc241eee7d"
client_secret = "3160ec2d2bc2455f8b8b7792fddaf86c"
my_app_OAuth = instaOAuth(client_id,client_secret, scope = "follower_list" )
setwd("C:/Users/dan_9/Desktop/COURSERA + SELF STUDY/Exploratory Data Analysis by John Hopkins University/Project 1")
library(dplyr)
library(lubridate)
library(ggplot2)
library(stringr)
library(scales) # for datebreaks() function
library(reshape2) # for melt() purpose
library(Rmisc) # for combining multiple ggplot multiplot()
data = read.csv("household_power_consumption.txt", sep = ";")
datawork = data
glimpse(datawork)
# converting into character format
for(i in 1: ncol(datawork)){
datawork[,i] = as.character(datawork[,i])
}
# changing ? into NA
for (i in 1: ncol(datawork)) {
datawork[,i] = gsub("\\?", NA, datawork[,i])
}
# counting how many NAs
NAcol = NULL
for (i in 1: ncol(datawork)){
NAcol[i] = sum(is.na(datawork[,i]))
}
# converting col Date into time format
datawork$Date  = dmy(datawork$Date)
# converting col Global_active_power into Numeric
datawork$Global_active_power  = as.numeric(datawork$Global_active_power)
# We will only be using data frothe dates 2007-02-01 and 2007-02-02
DataFiltered = filter(datawork, Date >=  "2007-01-31" & Date <= "2007-02-02")
glimpse(DataFiltered)
# Adding TimeComplete column using lubridate
DataFiltered = DataFiltered %>%
mutate(Date, TimeComplete = paste(DataFiltered$Date ,DataFiltered$Time, sep = " " ))
DataFiltered$TimeComplete  = ymd_hms(DataFiltered$TimeComplete)
# converting sub_metering 1,2,3 into numeric
for (i in 7:9) {
DataFiltered[,i] = as.numeric(DataFiltered[,i])
}
# converting Global_reactive_power ,  Voltage into numeric
DataFiltered$Global_reactive_power = as.numeric(DataFiltered$Global_reactive_power)
DataFiltered$Voltage = as.numeric(DataFiltered$Voltage)
?dget
DataReady = function(){
setwd("C:/Users/dan_9/Desktop/COURSERA + SELF STUDY/Exploratory Data Analysis by John Hopkins University/Project 1")
library(dplyr)
library(lubridate)
library(ggplot2)
library(stringr)
library(scales) # for datebreaks() function
library(reshape2) # for melt() purpose
library(Rmisc) # for combining multiple ggplot multiplot()
data = read.csv("household_power_consumption.txt", sep = ";")
datawork = data
glimpse(datawork)
# converting into character format
for(i in 1: ncol(datawork)){
datawork[,i] = as.character(datawork[,i])
}
# changing ? into NA
for (i in 1: ncol(datawork)) {
datawork[,i] = gsub("\\?", NA, datawork[,i])
}
# counting how many NAs
NAcol = NULL
for (i in 1: ncol(datawork)){
NAcol[i] = sum(is.na(datawork[,i]))
}
# converting col Date into time format
datawork$Date  = dmy(datawork$Date)
# converting col Global_active_power into Numeric
datawork$Global_active_power  = as.numeric(datawork$Global_active_power)
# We will only be using data frothe dates 2007-02-01 and 2007-02-02
DataFiltered = filter(datawork, Date >=  "2007-01-31" & Date <= "2007-02-02")
glimpse(DataFiltered)
# Adding TimeComplete column using lubridate
DataFiltered = DataFiltered %>%
mutate(Date, TimeComplete = paste(DataFiltered$Date ,DataFiltered$Time, sep = " " ))
DataFiltered$TimeComplete  = ymd_hms(DataFiltered$TimeComplete)
# converting sub_metering 1,2,3 into numeric
for (i in 7:9) {
DataFiltered[,i] = as.numeric(DataFiltered[,i])
}
# converting Global_reactive_power ,  Voltage into numeric
DataFiltered$Global_reactive_power = as.numeric(DataFiltered$Global_reactive_power)
DataFiltered$Voltage = as.numeric(DataFiltered$Voltage)
return(DataFiltered)
}
setwd("C:/Users/dan_9/Desktop/COURSERA + SELF STUDY/Exploratory Data Analysis by John Hopkins University/Project 1")
source(DataReady.R)
source("DataReady.R")
DataReady = function(){
setwd("C:/Users/dan_9/Desktop/COURSERA + SELF STUDY/Exploratory Data Analysis by John Hopkins University/Project 1")
library(dplyr)
library(lubridate)
library(ggplot2)
library(stringr)
library(scales) # for datebreaks() function
library(reshape2) # for melt() purpose
library(Rmisc) # for combining multiple ggplot multiplot()
data = read.csv("household_power_consumption.txt", sep = ";")
datawork = data
glimpse(datawork)
# converting into character format
for(i in 1: ncol(datawork)){
datawork[,i] = as.character(datawork[,i])
}
# changing ? into NA
for (i in 1: ncol(datawork)) {
datawork[,i] = gsub("\\?", NA, datawork[,i])
}
# counting how many NAs
NAcol = NULL
for (i in 1: ncol(datawork)){
NAcol[i] = sum(is.na(datawork[,i]))
}
# converting col Date into time format
datawork$Date  = dmy(datawork$Date)
# converting col Global_active_power into Numeric
datawork$Global_active_power  = as.numeric(datawork$Global_active_power)
# We will only be using data frothe dates 2007-02-01 and 2007-02-02
DataFiltered = filter(datawork, Date >=  "2007-01-31" & Date <= "2007-02-02")
glimpse(DataFiltered)
# Adding TimeComplete column using lubridate
DataFiltered = DataFiltered %>%
mutate(Date, TimeComplete = paste(DataFiltered$Date ,DataFiltered$Time, sep = " " ))
DataFiltered$TimeComplete  = ymd_hms(DataFiltered$TimeComplete)
# converting sub_metering 1,2,3 into numeric
for (i in 7:9) {
DataFiltered[,i] = as.numeric(DataFiltered[,i])
}
# converting Global_reactive_power ,  Voltage into numeric
DataFiltered$Global_reactive_power = as.numeric(DataFiltered$Global_reactive_power)
DataFiltered$Voltage = as.numeric(DataFiltered$Voltage)
return(datawork,DataFiltered)
}
source("DataReady.R")
setwd("C:/Users/dan_9/Desktop/COURSERA + SELF STUDY/Exploratory Data Analysis by John Hopkins University/Project 1")
source("DataReady.R")
source("DataReady.R")
setwd("C:/Users/dan_9/Desktop/COURSERA + SELF STUDY/Exploratory Data Analysis by John Hopkins University/Project 1")
source("DataReady.R")
source("DataReady.R")
View(DataReady)
source("DataReady.R")
DataFiltered
DataReady
DataReady
source("DataReady.R")
DataReady
DataReady
a = DataReady()
source("DataReady.R")
a = DataReady()
source("DataReady.R")
source("DataReady.R")
Data = DataFiltered()
Plot1 = ggplot(Data, aes(x = Global_active_power)) +
geom_histogram(binwidth =.5,color = "black", fill  = "red") +
scale_x_continuous( limits = c(0,6))+
ggtitle("Global Active Power")+
xlab("Global Active Power (kilowatts)") +
ylab("Frequency") +
theme(panel.background = element_rect(fill = "white"))
Plot1
setwd("C:/Users/dan_9/Desktop/COURSERA + SELF STUDY/Exploratory Data Analysis by John Hopkins University/Project 1")
source("DataReady.R")
Data = DataFiltered()
# Making Plot 2
# using library(scales) for date_breaks()
Plot2 = ggplot(DataFiltered, aes(x = TimeComplete, y = Global_active_power))+
geom_line()+
scale_x_datetime(date_labels = "%a", breaks = date_breaks("1 day")) +
setwd("C:/Users/dan_9/Desktop/COURSERA + SELF STUDY/Exploratory Data Analysis by John Hopkins University/Project 1")
source("DataReady.R")
Data = DataFiltered()
# Making Plot 2
# using library(scales) for date_breaks()
Plot2 = ggplot(Data, aes(x = TimeComplete, y = Global_active_power))+
geom_line()+
scale_x_datetime(date_labels = "%a", breaks = date_breaks("1 day")) +
theme(panel.background = element_rect(fill = "white")) +
ylab("Global Active Power (kilowatts)") +
xlab("")
png("Plot2.png", width=480, height=480)
Plot2
dev.off()
setwd("C:/Users/dan_9/Desktop/COURSERA + SELF STUDY/Exploratory Data Analysis by John Hopkins University/Project 1")
source("DataReady.R")
Data = DataFiltered()
DataPlot3 = select(Data,TimeComplete, Sub_metering_1, Sub_metering_2, Sub_metering_3 )
DataPlot3 = melt(data = Data, measure.vars = c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
glimpse(DataPlot3)
table(DataPlot3$DataPlot3)
Plot3 = ggplot(DataPlot3, aes(x = TimeComplete , y = value,  group = variable, color=variable))+
geom_line()+
scale_x_datetime(date_labels = "%a", breaks = date_breaks("1 day")) +
theme(panel.background = element_rect(fill = "white")) +
ylab("Global Active Power (kilowatts)") +
xlab("") +
theme(legend.position = c(.85,.85), legend.title=element_blank())
png("Plot3.png", width=480, height=480)
Plot3
Plot3
DataPlot3
Plot3 = ggplot(DataPlot3, aes(x = TimeComplete , y = value,  group = variable, color=variable))+
geom_line()+
scale_x_datetime(date_labels = "%a", breaks = date_breaks("1 day")) +
theme(panel.background = element_rect(fill = "white")) +
ylab("Global Active Power (kilowatts)") +
xlab("") +
theme(legend.position = c(.85,.85), legend.title=element_blank())
Plot3
Plot3
Plot3
Plot2
ggplot(Data, aes(x = TimeComplete, y = Global_active_power))+
geom_line()+
scale_x_datetime(date_labels = "%a", breaks = date_breaks("1 day")) +
theme(panel.background = element_rect(fill = "white")) +
ylab("Global Active Power (kilowatts)") +
xlab("")
Data
ggplot
library(ggplot2)
library(ggplot2)
library(scales)
Plot2 = ggplot(Data, aes(x = TimeComplete, y = Global_active_power))+
geom_line()+
scale_x_datetime(date_labels = "%a", breaks = date_breaks("1 day")) +
theme(panel.background = element_rect(fill = "white")) +
ylab("Global Active Power (kilowatts)") +
xlab("")
Plot2
Plot2
Plot2
Plot2
